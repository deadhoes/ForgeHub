local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "ForgeHub " .. Fluent.Version,
    SubTitle = "Grow a Bussiness",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "home" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
end)

local Toggle = Tabs.Main:AddToggle("autocollectcash", {Title = "Auto Collect Cash", Default = false })

Toggle:OnChanged(function()
    print("Toggle changed:", Options.autocollectcash.Value)
end)

Options.autocollectcash:SetValue(false)

RunService.RenderStepped:Connect(function()
    if not Options.autocollectcash.Value then return end
    if not Character or not Character:FindFirstChild("HumanoidRootPart") then return end

    local rootPos = Character.HumanoidRootPart.Position

    for _, model in ipairs(workspace.PlacedEmployees:GetChildren()) do
        if model:IsA("Model") then
            for _, descendant in ipairs(model:GetDescendants()) do
                if descendant:IsA("ProximityPrompt") then
                    local part = descendant.Parent
                    if part and part:IsA("BasePart") then
                        local distance = (part.Position - rootPos).Magnitude
                        if distance <= 50 then
                            fireproximityprompt(descendant)
                        end
                    end
                end
            end
        end
    end
end)



local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

local Remote = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("PlaceEmployee")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    HumanoidRootPart = char:WaitForChild("HumanoidRootPart")
end)

local Toggle = Tabs.Main:AddToggle("PlaceAllTools", {Title = "Auto Place Employees", Default = false})

Toggle:OnChanged(function()
    print("🔁 Toggle changed:", Options.PlaceAllTools.Value)
end)

Options.PlaceAllTools:SetValue(false)

local function placeToolUntilGone(tool)
    if not tool or not tool.Parent then return end
    local toolName = tool.Name

    if toolName == "Pick Up" then
        print("⏭️ Skipping tool named 'Pick Up'")
        return
    end

    while Options.PlaceAllTools.Value and tool.Parent == Backpack do
        if not HumanoidRootPart then break end
        for _, tier in {"Normal", "Inferno", "Rainbow", "Gold"} do
            print("🔥 Placing", toolName, "as", tier)
            local args = {toolName, tier, HumanoidRootPart.CFrame}
            Remote:FireServer(unpack(args))
        end
        task.wait(0.5)
    end

    print("✅ Done placing tool:", toolName)
end

Backpack.ChildAdded:Connect(function(child)
    if child:IsA("Tool") then
        task.wait(0.5)
        if Options.PlaceAllTools.Value then
            placeToolUntilGone(child)
        end
    end
end)

Toggle:OnChanged(function()
    if Options.PlaceAllTools.Value then
        for _, tool in ipairs(Backpack:GetChildren()) do
            if tool:IsA("Tool") then
                task.spawn(function()
                    placeToolUntilGone(tool)
                end)
            end
        end
    end
end)



local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remote = ReplicatedStorage:WaitForChild("RemoteEvents"):WaitForChild("BuyEmployee")

local employees = {
    "Noob Employee",
    "Business Man",
    "Teacher",
    "Gardener",
    "Painter",
    "Chef",
    "Mine",
    "Fortune Magician",
    "Bank",
    "Skyscraper",
    "Stadium",
    "Waterpark",
    "Castle"
}

local delayBetweenBuys = 0.9
local selectedEmployees = {}

local Toggle = Tabs.Main:AddToggle("AutoBuyEmployees", {Title = "Auto Buy Employees", Default = false})

local MultiDropdown = Tabs.Main:AddDropdown("EmployeeDropdown", {
    Title = "Select Employees to Buy",
    Values = employees,
    Multi = true,
    Default = {}
})

MultiDropdown:OnChanged(function(value)
    selectedEmployees = {}
    for employeeName, isSelected in pairs(value) do
        if isSelected then
            table.insert(selectedEmployees, employeeName)
        end
    end
end)

local buyingTask
local runBuying = false

Toggle:OnChanged(function()
    if Options.AutoBuyEmployees.Value then
        if #selectedEmployees == 0 then
            Options.AutoBuyEmployees:SetValue(false)
            return
        end

        runBuying = true
        buyingTask = task.spawn(function()
            while runBuying do
                for _, employeeName in ipairs(selectedEmployees) do
                    if not runBuying then break end
                    Remote:FireServer(employeeName)
                    task.wait(delayBetweenBuys)
                end
                task.wait(0.5)
            end
        end)
    else
        runBuying = false
    end
end)

Options.AutoBuyEmployees:SetValue(false)
MultiDropdown:SetValue({})








-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("ForgeCloud")
SaveManager:SetFolder("ForgeCloud/grow-a-business")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
end
