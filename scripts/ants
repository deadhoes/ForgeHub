local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "ForgeHub "..Fluent.Version,
    SubTitle = "Ants",
    TabWidth = 160,
    Size = UDim2.fromOffset(650, 500),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({Title = "Main", Icon = "box"}),
    Player = Window:AddTab({Title = "Player", Icon = "user"}),
    Teleport = Window:AddTab({Title = "Teleport", Icon = "map-pin"}),
    Visuals = Window:AddTab({Title = "Visuals", Icon = "eye"}),
    Settings = Window:AddTab({Title = "Settings", Icon = "settings"})
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local RootPart = Character:WaitForChild("HumanoidRootPart")

Tabs.Main:AddToggle("AutoUseEgg", {
    Title = "Auto Place Eggs",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                while Fluent.Options.AutoUseEgg.Value do
                    local backpack = LocalPlayer:FindFirstChild("Backpack")
                    if backpack then
                        for _,tool in ipairs(backpack:GetChildren()) do
                            if tool:IsA("Tool") and tool.Name:find("Egg") then
                                ReplicatedStorage.Remotes.UseEgg:FireServer(tool.Name:gsub("%s*Egg$", ""), tool)
                            end
                        end
                    end
                    task.wait(0.1)
                end
            end)
        end
    end
})

local antNames = {"Basic Ant", "Bullet Ant", "Titan Ant", "Crystal Ant", "Golden Ant", "Yellow Crazy Ant", "Fire Ant"}

Tabs.Main:AddDropdown("AntSelection", {
    Title = "Select Ants to Buy",
    Values = antNames,
    Multi = true,
    Default = {},
    Callback = function(selection)
        Fluent.Options.SelectedAnts = {}
        for name,selected in pairs(selection) do
            if selected then Fluent.Options.SelectedAnts[name] = true end
        end
    end
})

Tabs.Main:AddToggle("AutoBuyAnts", {
    Title = "Auto Buy Ants",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                while Fluent.Options.AutoBuyAnts.Value do
                    local eggsFolder = Workspace:FindFirstChild("Eggs")
                    if eggsFolder then
                        for _,model in ipairs(eggsFolder:GetChildren()) do
                            if model:IsA("Model") and Fluent.Options.SelectedAnts[model.Name] then
                                local hrp = model:FindFirstChild("HumanoidRootPart")
                                if hrp then
                                    for _,prompt in ipairs(hrp:GetChildren()) do
                                        if prompt:IsA("ProximityPrompt") then
                                            fireproximityprompt(prompt, 0, true)
                                        end
                                    end
                                end
                            end
                        end
                    end
                    task.wait(0.1)
                end
            end)
        end
    end
})

Tabs.Main:AddToggle("AutoCollectTokens", {
    Title = "Auto Collect Tokens",
    Default = false,
    Callback = function(state)
        if state then
            task.spawn(function()
                local hrp = Character:WaitForChild("HumanoidRootPart")
                while Fluent.Options.AutoCollectTokens.Value do
                    local tokensFolder = Workspace:FindFirstChild("Tokens")
                    if tokensFolder then
                        for _,part in ipairs(tokensFolder:GetDescendants()) do
                            if part:IsA("BasePart") and part:FindFirstChildWhichIsA("TouchTransmitter") then
                                firetouchinterest(hrp, part, 0)
                                firetouchinterest(hrp, part, 1)
                            end
                        end
                    end
                    task.wait(0.1)
                end
            end)
        end
    end
})

Tabs.Player:AddSlider("WalkSpeed", {
    Title = "Walk Speed",
    Default = 16,
    Min = 16,
    Max = 200,
    Rounding = 0,
    Callback = function(value)
        Humanoid.WalkSpeed = value
    end
})

Tabs.Player:AddSlider("JumpPower", {
    Title = "Jump Power",
    Default = 50,
    Min = 50,
    Max = 300,
    Rounding = 0,
    Callback = function(value)
        Humanoid.JumpPower = value
    end
})

Tabs.Player:AddToggle("InfiniteJump", {
    Title = "Infinite Jump",
    Default = false,
    Callback = function(state)
        if state then
            UserInputService.JumpRequest:Connect(function()
                if Fluent.Options.InfiniteJump.Value then
                    Humanoid:ChangeState("Jumping")
                end
            end)
        end
    end
})

Tabs.Player:AddToggle("Noclip", {
    Title = "Noclip",
    Default = false,
    Callback = function(state)
        if state then
            game:GetService("RunService").Stepped:Connect(function()
                if Fluent.Options.Noclip.Value then
                    for _,part in ipairs(Character:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        end
    end
})

local teleportLocations = {
    ["Egg Buy"] = CFrame.new(0, 10, 0),
    ["Secret Area"] = CFrame.new(100, 50, 100),
    ["Treasure Room"] = CFrame.new(-200, 25, -150)
}

Tabs.Teleport:AddDropdown("Locations", {
    Title = "Teleport Locations",
    Values = {"Egg Buy", "Secret Area", "Treasure Room"},
    Multi = false,
    Default = nil,
    Callback = function(selection)
        if teleportLocations[selection] then
            local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad)
            local tween = TweenService:Create(RootPart, tweenInfo, {CFrame = teleportLocations[selection]})
            tween:Play()
        end
    end
})

Tabs.Visuals:AddToggle("EspPlayers", {
    Title = "ESP Players",
    Default = false,
    Callback = function(state)
        if state then
            for _,player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character then
                    local highlight = Instance.new("Highlight")
                    highlight.Parent = player.Character
                    highlight.FillColor = Color3.new(1, 0, 0)
                    highlight.OutlineColor = Color3.new(1, 1, 0)
                end
            end
        else
            for _,player in ipairs(Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("Highlight") then
                    player.Character.Highlight:Destroy()
                end
            end
        end
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
InterfaceManager:SetFolder("ForgeHub")
SaveManager:SetFolder("ForgeHub/config")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)
SaveManager:LoadAutoloadConfig()

Humanoid.WalkSpeed = Fluent.Options.WalkSpeed.Value
Humanoid.JumpPower = Fluent.Options.JumpPower.Value
